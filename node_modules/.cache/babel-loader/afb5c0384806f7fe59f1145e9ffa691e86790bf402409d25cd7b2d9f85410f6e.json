{"ast":null,"code":"const binUrl=\"https://api.jsonbin.io/v3/b/67b89ee0acd3cb34a8eb4f64\";const apiKey=\"$2a$10$SjZwuogGpIK.W8u7CM0KkuYfBCbavh1ZT3VWBM0evnZAfo9Vq0Yce\";export const logPageView=async()=>{try{// Fetch current data from JSONBin\nconst response=await fetch(binUrl,{headers:{\"X-Master-Key\":apiKey}});if(!response.ok){throw new Error(`HTTP error! Status: ${response.status}`);}const data=await response.json();console.log(\"Tracking page view...\");// Only logs in console for debugging\n// Ensure `record` exists\nif(!data||!data.record){throw new Error(\"Invalid response format: 'record' is missing\");}let newViews=(data.record.views||0)+1;let timestamp=new Date().toISOString();let userIP=await getUserIP();let newLogEntry={ip:userIP,timestamp};let updatedLogs=[...(data.record.logs||[]),newLogEntry];// Update JSONBin (store the new view count and logs)\nawait fetch(binUrl,{method:\"PUT\",headers:{\"Content-Type\":\"application/json\",\"X-Master-Key\":apiKey},body:JSON.stringify({views:newViews,logs:updatedLogs})});}catch(error){console.error(\"Error logging page view:\",error);}};// Function to get user's IP address\nconst getUserIP=async()=>{try{const res=await fetch(\"https://api64.ipify.org?format=json\");const data=await res.json();return data.ip;}catch(error){console.error(\"Could not fetch IP:\",error);return\"Unknown IP\";}};","map":{"version":3,"names":["binUrl","apiKey","logPageView","response","fetch","headers","ok","Error","status","data","json","console","log","record","newViews","views","timestamp","Date","toISOString","userIP","getUserIP","newLogEntry","ip","updatedLogs","logs","method","body","JSON","stringify","error","res"],"sources":["/Users/sumitkumar/Downloads/birthday-card/src/pageTracker.js"],"sourcesContent":["const binUrl = \"https://api.jsonbin.io/v3/b/67b89ee0acd3cb34a8eb4f64\";\nconst apiKey = \"$2a$10$SjZwuogGpIK.W8u7CM0KkuYfBCbavh1ZT3VWBM0evnZAfo9Vq0Yce\"; \n\nexport const logPageView = async () => {\n    try {\n        // Fetch current data from JSONBin\n        const response = await fetch(binUrl, {\n            headers: { \"X-Master-Key\": apiKey }\n        });\n\n        if (!response.ok) {\n            throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n\n        const data = await response.json();\n        console.log(\"Tracking page view...\"); // Only logs in console for debugging\n\n        // Ensure `record` exists\n        if (!data || !data.record) {\n            throw new Error(\"Invalid response format: 'record' is missing\");\n        }\n\n        let newViews = (data.record.views || 0) + 1;\n        let timestamp = new Date().toISOString();\n        let userIP = await getUserIP();\n\n        let newLogEntry = { ip: userIP, timestamp };\n        let updatedLogs = [...(data.record.logs || []), newLogEntry];\n\n        // Update JSONBin (store the new view count and logs)\n        await fetch(binUrl, {\n            method: \"PUT\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"X-Master-Key\": apiKey\n            },\n            body: JSON.stringify({\n                views: newViews,\n                logs: updatedLogs\n            })\n        });\n\n    } catch (error) {\n        console.error(\"Error logging page view:\", error);\n    }\n};\n\n// Function to get user's IP address\nconst getUserIP = async () => {\n    try {\n        const res = await fetch(\"https://api64.ipify.org?format=json\");\n        const data = await res.json();\n        return data.ip;\n    } catch (error) {\n        console.error(\"Could not fetch IP:\", error);\n        return \"Unknown IP\";\n    }\n};"],"mappings":"AAAA,KAAM,CAAAA,MAAM,CAAG,sDAAsD,CACrE,KAAM,CAAAC,MAAM,CAAG,8DAA8D,CAE7E,MAAO,MAAM,CAAAC,WAAW,CAAG,KAAAA,CAAA,GAAY,CACnC,GAAI,CACA;AACA,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAACJ,MAAM,CAAE,CACjCK,OAAO,CAAE,CAAE,cAAc,CAAEJ,MAAO,CACtC,CAAC,CAAC,CAEF,GAAI,CAACE,QAAQ,CAACG,EAAE,CAAE,CACd,KAAM,IAAI,CAAAC,KAAK,CAAC,uBAAuBJ,QAAQ,CAACK,MAAM,EAAE,CAAC,CAC7D,CAEA,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAN,QAAQ,CAACO,IAAI,CAAC,CAAC,CAClCC,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC,CAAE;AAEtC;AACA,GAAI,CAACH,IAAI,EAAI,CAACA,IAAI,CAACI,MAAM,CAAE,CACvB,KAAM,IAAI,CAAAN,KAAK,CAAC,8CAA8C,CAAC,CACnE,CAEA,GAAI,CAAAO,QAAQ,CAAG,CAACL,IAAI,CAACI,MAAM,CAACE,KAAK,EAAI,CAAC,EAAI,CAAC,CAC3C,GAAI,CAAAC,SAAS,CAAG,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CACxC,GAAI,CAAAC,MAAM,CAAG,KAAM,CAAAC,SAAS,CAAC,CAAC,CAE9B,GAAI,CAAAC,WAAW,CAAG,CAAEC,EAAE,CAAEH,MAAM,CAAEH,SAAU,CAAC,CAC3C,GAAI,CAAAO,WAAW,CAAG,CAAC,IAAId,IAAI,CAACI,MAAM,CAACW,IAAI,EAAI,EAAE,CAAC,CAAEH,WAAW,CAAC,CAE5D;AACA,KAAM,CAAAjB,KAAK,CAACJ,MAAM,CAAE,CAChByB,MAAM,CAAE,KAAK,CACbpB,OAAO,CAAE,CACL,cAAc,CAAE,kBAAkB,CAClC,cAAc,CAAEJ,MACpB,CAAC,CACDyB,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CACjBb,KAAK,CAAED,QAAQ,CACfU,IAAI,CAAED,WACV,CAAC,CACL,CAAC,CAAC,CAEN,CAAE,MAAOM,KAAK,CAAE,CACZlB,OAAO,CAACkB,KAAK,CAAC,0BAA0B,CAAEA,KAAK,CAAC,CACpD,CACJ,CAAC,CAED;AACA,KAAM,CAAAT,SAAS,CAAG,KAAAA,CAAA,GAAY,CAC1B,GAAI,CACA,KAAM,CAAAU,GAAG,CAAG,KAAM,CAAA1B,KAAK,CAAC,qCAAqC,CAAC,CAC9D,KAAM,CAAAK,IAAI,CAAG,KAAM,CAAAqB,GAAG,CAACpB,IAAI,CAAC,CAAC,CAC7B,MAAO,CAAAD,IAAI,CAACa,EAAE,CAClB,CAAE,MAAOO,KAAK,CAAE,CACZlB,OAAO,CAACkB,KAAK,CAAC,qBAAqB,CAAEA,KAAK,CAAC,CAC3C,MAAO,YAAY,CACvB,CACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}